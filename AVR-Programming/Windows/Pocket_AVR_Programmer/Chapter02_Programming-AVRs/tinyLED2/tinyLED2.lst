
tinyLED2.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	02 d0       	rcall	.+4      	; 0x30 <main>
  2c:	1b c0       	rjmp	.+54     	; 0x64 <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <main>:


int main(void) {

  // -------- Inits --------- //
  DDRB |= 0b0000011;            /* Data Direction Register B:
  30:	87 b3       	in	r24, 0x17	; 23
  32:	83 60       	ori	r24, 0x03	; 3
  34:	87 bb       	out	0x17, r24	; 23
                                				*/

  // ------ Event loop ------ //
  while (1) {

    PORTB = 0b00000001;          /* Turn on first LED bit/pin in PORTB */
  36:	91 e0       	ldi	r25, 0x01	; 1
    _delay_ms(1000);                                           /* wait */

    //PORTB = 0b00000000;          /* Turn off all B pins, including LED */
    //_delay_ms(1000);                                           /* wait */

    PORTB = 0b00000010;          /* Turn on second LED bit/pin in PORTB*/
  38:	82 e0       	ldi	r24, 0x02	; 2
                                				*/

  // ------ Event loop ------ //
  while (1) {

    PORTB = 0b00000001;          /* Turn on first LED bit/pin in PORTB */
  3a:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  3c:	2f e3       	ldi	r18, 0x3F	; 63
  3e:	3d e0       	ldi	r19, 0x0D	; 13
  40:	43 e0       	ldi	r20, 0x03	; 3
  42:	21 50       	subi	r18, 0x01	; 1
  44:	30 40       	sbci	r19, 0x00	; 0
  46:	40 40       	sbci	r20, 0x00	; 0
  48:	e1 f7       	brne	.-8      	; 0x42 <__SREG__+0x3>
  4a:	00 c0       	rjmp	.+0      	; 0x4c <__SREG__+0xd>
  4c:	00 00       	nop
    _delay_ms(1000);                                           /* wait */

    //PORTB = 0b00000000;          /* Turn off all B pins, including LED */
    //_delay_ms(1000);                                           /* wait */

    PORTB = 0b00000010;          /* Turn on second LED bit/pin in PORTB*/
  4e:	88 bb       	out	0x18, r24	; 24
  50:	2f e3       	ldi	r18, 0x3F	; 63
  52:	3d e0       	ldi	r19, 0x0D	; 13
  54:	43 e0       	ldi	r20, 0x03	; 3
  56:	21 50       	subi	r18, 0x01	; 1
  58:	30 40       	sbci	r19, 0x00	; 0
  5a:	40 40       	sbci	r20, 0x00	; 0
  5c:	e1 f7       	brne	.-8      	; 0x56 <__SREG__+0x17>
  5e:	00 c0       	rjmp	.+0      	; 0x60 <__SREG__+0x21>
  60:	00 00       	nop
  62:	eb cf       	rjmp	.-42     	; 0x3a <main+0xa>

00000064 <_exit>:
  64:	f8 94       	cli

00000066 <__stop_program>:
  66:	ff cf       	rjmp	.-2      	; 0x66 <__stop_program>
